#ifndef _LEETCODE_NUMS_924_MIN_MALWARE_SPREAD_H_
#define _LEETCODE_NUMS_924_MIN_MALWARE_SPREAD_H_

#include "god.h"

/*
 * @lc app=leetcode.cn id=924 lang=cpp
 *
 * [924] 尽量减少恶意软件的传播
 * 给出了一个由 n 个节点组成的网络，用 n × n 个邻接矩阵图 graph 表示。
 * 在节点网络中，当 graph[i][j] = 1 时，表示节点 i 能够直接连接到另一个节点 j。
 * 一些节点 initial 最初被恶意软件感染。只要两个节点直接连接，且其中至少一个节点受到恶意软件的感染，
 * 那么两个节点都将被恶意软件感染。这种恶意软件的传播将继续，直到没有更多的节点可以被这种方式感染。
 * 假设 M(initial) 是在恶意软件停止传播之后，整个网络中感染恶意软件的最终节点数。
 * 如果从 initial 中移除某一节点能够最小化 M(initial)， 返回该节点。如果有多个节点满足条件，就返回索引最小的节点。
 * 请注意，如果某个节点已从受感染节点的列表 initial 中删除，它以后仍有可能因恶意软件传播而受到感染。
 * 示例 1：
 * 输入：graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
 * 输出：0
 *
 * 示例 2：
 * 输入：graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
 * 输出：0
 *
 * 示例 3：
 * 输入：graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
 * 输出：1
 *
 * 提示：
 * n == graph.length
 * n == graph[i].length
 * 2 <= n <= 300
 * graph[i][j] == 0 或 1.
 * graph[i][j] == graph[j][i]
 * graph[i][i] == 1
 * 1 <= initial.length <= n
 * 0 <= initial[i] <= n - 1
 * initial 中所有整数均不重复
 */

// @lc code=start
class Solution_924 {
public:
    void init(int n) {
        for (int i = 0; i < n; i++) {
            father.push_back(i);
            rank.push_back(1);
        }
    }
    int find(int x)
    {
        if (father[x] == x) {
            return x;
        } else {
            return father[x] = find(father[x]);
        }
    }

    void merge(int i, int j)
    {
        int x = find(i);
        int y = find(j);
        if (x == y) {
            return;
        } else if (x < y) {
            father[y] = x;
            rank[x]++;
        } else {
            father[x] = y;
            rank[y]++;
        }
    }

    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial)
    {
        int max = 0;
        set<int> fSet;
        vector<int> initialNum(initial.size());
        int n = graph.size();
        int result = initial[0];
        init(n);
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (graph[i][j] == 0) {
                    continue;
                }
                merge(i, j);
            }
        }
        for (int i = 0; i < initial.size(); i++) {
            int x = find(initial[i]);
            auto ret = fSet.insert(x);
            if (ret.second == false) {
                for (int j = 0; j < i; j++) {
                    if (find(initial[j]) == x) {
                        initialNum[j] = 0;
                    }
                }
                initialNum[i] = 0;
            } else {
                initialNum[i] = rank[x];
            }
        }

        for (int i = 0; i < initialNum.size(); i++) {
            if (max == initialNum[i] && initial[i] < result) {
                result = initial[i];
            } else if (initialNum[i] > max) {
                max = initialNum[i];
                result = initial[i];
            }
        }
        return result;
    }

private:

    vector<int> father;
    vector<int> rank;
};

// @lc code=end
TEST(test_problem_924, testcase000)
{
    Solution_924 so;
    vector<vector<int>> graph = {
        {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1},
        {0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0},
        {0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0},
        {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0},
        {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0},
        {0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0},
        {0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0},
        {0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}
    };
    vector<int> initial = {7,8,6,2,3};
    int result = so.minMalwareSpread(graph, initial);
    EXPECT_EQ(result, 2);
}

TEST(test_problem_924, testcase00)
{
    Solution_924 so;
    vector<vector<int>> graph = {
        {1,0,0,0},
        {0,1,1,0},
        {0,1,1,0},
        {0,0,0,1}
    };
    vector<int> initial = {1,3};
    int result = so.minMalwareSpread(graph, initial);
    EXPECT_EQ(result, 1);
}

TEST(test_problem_924, testcase0)
{
    Solution_924 so;
    vector<vector<int>> graph = {
        {1, 1, 0},
        {1, 1, 0},
        {0, 0, 1},
    };
    vector<int> initial = {0, 1};
    int result = so.minMalwareSpread(graph, initial);
    EXPECT_EQ(result, 0);
}

TEST(test_problem_924, testcase1)
{
    Solution_924 so;
    vector<vector<int>> graph = {
        {1, 0, 0},
        {0, 1, 0},
        {0, 0, 1},
    };
    vector<int> initial = {0, 2};
    int result = so.minMalwareSpread(graph, initial);
    EXPECT_EQ(result, 0);
}

TEST(test_problem_924, testcase2)
{
    Solution_924 so;
    vector<vector<int>> graph = {
        {1, 1, 1},
        {1, 1, 1},
        {1, 1, 1},
    };
    vector<int> initial = {1, 2};
    int result = so.minMalwareSpread(graph, initial);
    EXPECT_EQ(result, 1);
}

#endif /*_LEETCODE_NUMS_924_MIN_MALWARE_SPREAD_H_*/
